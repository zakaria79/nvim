-------------
-- Aliases --
-------------
local cmd = vim.cmd
local fn = vim.fn
local g = vim.g
local map = vim.api.nvim_set_keymap
local o = vim.opt

-------------
-- Options --
-------------
vim.syntax=true
o.cursorline=true
o.number = true
o.mouse='a'
o.completeopt = 'menuone,noinsert,noselect'
o.inccommand = 'nosplit'
o.signcolumn = 'yes'
o.scrolloff = 5
o.shiftwidth = 4
o.tabstop = 4
o.softtabstop=4
o.expandtab = true
o.shortmess = o.shortmess + 'c'
o.showmode = true
o.splitbelow = true
o.splitright = true
o.termguicolors = true
o.undofile = true
o.colorcolumn='80'
o.mousemodel='popup'
o.swapfile=false
o.wildmenu=true
o.backspace='indent,eol,start'
o.showcmd=true
o.hlsearch=true
o.incsearch=true
o.ignorecase=true
o.smartcase=true
o.autoindent=true
o.smartindent=true
o.diffopt='vertical'
o.bo='all'
o.ttimeout=true
o.ttimeoutlen=100
o.list=true
-- o.listchars='tab:>-,trail:-'
o.listchars='tab:..,trail:.'
-- o.listchars='tab:..,trail:.'
o.startofline=false
o.ruler=true
o.laststatus=2
o.confirm=true
o.eb=false
o.vb=false
o.autoread=true
o.shiftround=true
o.showmatch=true
o.path=o.path + '**'
o.hidden=true
o.backup=false
o.writebackup=false
o.cmdheight=1
o.updatetime=100
o.omnifunc ='syntaxcomplete#Complete'
o.wrap=false
g.mapleader=" "
g.fzf_buffers_jump = 1

g.nvim_tree_highlight_opened_files = 1

g.user_emmet_leader='<Tab>'
g.user_emmet_settings = {
    javascript = {
        extends = "jsx"
    }
}
g.foldmethod='expr'
g.foldexpr="nvim_treesitter#foldexpr()"

-- -------------
-- -- Plugins --
-- -------------
require "paq" {
    {'savq/paq-nvim', opt=true};
    -- lsp
    "neovim/nvim-lspconfig";
    'kabouzeid/nvim-lspinstall';
    'ray-x/lsp_signature.nvim';
    'williamboman/nvim-lsp-installer';
    'glepnir/lspsaga.nvim';
    -- status line
    'vim-airline/vim-airline';
    'vim-airline/vim-airline-themes';
    -- themes
    'dracula/vim';
    'joshdick/onedark.vim';
    'morhetz/gruvbox';
    -- completion
    'hrsh7th/nvim-compe';
    'nvim-lua/completion-nvim';
    -- telescope
    'nvim-lua/plenary.nvim';
    'nvim-lua/telescope.nvim';
    {'nvim-telescope/telescope-fzf-native.nvim', run = 'make'};
    -- syntax
    'prettier/vim-prettier';
    'neoclide/vim-jsx-improve';
    'maxmellon/vim-jsx-pretty';
    -- snippets and completion
    'hrsh7th/vim-vsnip';
    'hrsh7th/vim-vsnip-integ';
    'rafamadriz/friendly-snippets';
    'nvim-treesitter/nvim-treesitter';
    'sheerun/vim-polyglot';
    'preservim/tagbar';
    'mattn/emmet-vim';
    'RRethy/vim-illuminate';
    'jiangmiao/auto-pairs';
    'tpope/vim-commentary'; -- gc, gcc
    -- git
    'lewis6991/gitsigns.nvim';
    'tpope/vim-fugitive';
    'airblade/vim-gitgutter';
    -- miscellaneous
    'jremmen/vim-ripgrep';
    'kyazdani42/nvim-web-devicons';
    'kyazdani42/nvim-tree.lua';
    -- ???
    'norcalli/nvim-colorizer.lua';
    'romgrk/barbar.nvim';
    'nvim-lua/popup.nvim';
    -- unused
    -- 'skywind3000/asyncrun.vim';
    -- 'eshion/vim-sync';
}

local opts = { noremap=true, silent=true }

-- -- key maps
map("i", "<CR>", "compe#confirm('<CR>')",     {expr = true})
map("i", "<Tab>", "v:lua.tab_complete()",     {expr = true})
map("s", "<Tab>", "v:lua.tab_complete()",     {expr = true})
map("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
map("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})

map("n", "<F2>", ":NvimTreeToggle<CR>", {noremap = true})
map("n", "R", ":NvimTreeRefresh<CR>", {noremap = true})
map("n", "<leader>n", ":NvimTreeFindFile<CR>", {noremap = true})

map('n', '<F8>', ':TagbarToggle<CR>', {noremap = true})

-- Telescope
-- Find files using Telescope command-line sugar.
map("n", "<leader>ff", ":Telescope find_files<CR>", {noremap = true})
map("n", "<leader>fg", ":Telescope live_grep<CR>", {noremap = true})
map("n", "<leader>fb", ":Telescope buffers<CR>", {noremap = true})
map("n", "<leader>fh", ":Telescope help_tags<CR>", {noremap = true})

map('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
map('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
map('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
map('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
-- lsp provider to find the cursor word definition and reference
-- nnoremap <silent> gh <cmd>lua require'lspsaga.provider'.lsp_finder()<CR>
map('n', 'gh', "<cmd>lua require'lspsaga.provider'.lsp_finder()<CR>", opts)
map('n', '<leader>ca', ":Lspsaga code_action<CR>", opts)

cmd 'autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE'
cmd 'colorscheme dracula'

local saga = require 'lspsaga'
saga.init_lsp_saga {
    debug = false,
    use_saga_diagnostic_sign = true,
    error_sign = "",
    warn_sign = "",
    hint_sign = "",
    infor_sign = "",
    -- code action title icon
    code_action_icon = " ",
    code_action_prompt = {
        enable = false,
        sign = true,
        sign_priority = 40,
        virtual_text = true,
    },
    finder_definition_icon = "  ",
    finder_reference_icon = "  ",
    max_preview_lines = 20,
    finder_action_keys = {
        open = "o",
        vsplit = "s",
        split = "i",
        quit = "q",
        scroll_down = "<C-f>",
        scroll_up = "<C-b>",
    },
    code_action_keys = {
        quit = "q",
        exec = "<CR>",
    },
    rename_action_keys = {
        quit = "<C-c>",
        exec = "<CR>",
    },
    definition_preview_icon = "  ",
    border_style = "single",
    rename_prompt_prefix = "➤",
    server_filetype_map = {},
}

-- ------------------------
-- Plugins Configuration --
-- ------------------------
require('telescope').setup{
    defaults = {
        vimgrep_arguments = {
            'rg',
            -- '--color=never',
            '--no-heading',
            '--with-filename',
            '--line-number',
            '--column',
            '--smart-case'
        },
        prompt_prefix = "> ",
        selection_caret = "> ",
        entry_prefix = "  ",
        initial_mode = "insert",
        selection_strategy = "reset",
        sorting_strategy = "descending",
        layout_strategy = "horizontal",
        layout_config = {
            horizontal = {
                mirror = false,
            },
            vertical = {
                mirror = false,
            },
        },
        file_sorter =  require'telescope.sorters'.get_fuzzy_file,
        file_ignore_patterns = {},
        generic_sorter =  require'telescope.sorters'.get_generic_fuzzy_sorter,
        winblend = 0,
        border = {},
        borderchars = { '─', '│', '─', '│', '╭', '╮', '╯', '╰' },
        color_devicons = true,
        use_less = true,
        path_display = {},
        set_env = { ['COLORTERM'] = 'truecolor' }, -- default = nil,
        file_previewer = require'telescope.previewers'.vim_buffer_cat.new,
        grep_previewer = require'telescope.previewers'.vim_buffer_vimgrep.new,
        qflist_previewer = require'telescope.previewers'.vim_buffer_qflist.new,
        -- Developer configurations: Not meant for general override
        buffer_previewer_maker = require'telescope.previewers'.buffer_previewer_maker
    }
}

require "lsp_signature".setup()

require'compe'.setup {
    enabled = true;
    autocomplete = true;
    debug = false;
    min_length = 1;
    preselect = 'enable';
    throttle_time = 80;
    source_timeout = 200;
    resolve_timeout = 800;
    incomplete_delay = 400;
    max_abbr_width = 100;
    max_kind_width = 100;
    max_menu_width = 100;
    documentation = {
        border = { '', '' ,'', ' ', '', '', '', ' ' }, -- the border option is the same as `|help nvim_open_win|`
        winhighlight = "NormalFloat:CompeDocumentation,FloatBorder:CompeDocumentationBorder",
        max_width = 120,
        min_width = 60,
        max_height = math.floor(vim.o.lines * 0.3),
        min_height = 1,
    };
    source = {
        path = true;
        buffer = true;
        calc = true;
        nvim_lsp = true;
        nvim_lua = true;
        vsnip = true;
        ultisnips = true;
        luasnip = true;
    };
}

require('gitsigns').setup {
    signs = {
        add          = {hl = 'GitSignsAdd'   , text = '│', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
        change       = {hl = 'GitSignsChange', text = '│', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
        delete       = {hl = 'GitSignsDelete', text = '_', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
        topdelete    = {hl = 'GitSignsDelete', text = '‾', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
        changedelete = {hl = 'GitSignsChange', text = '~', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    },
    numhl = false,
    linehl = false,
    -- keymaps = {
        -- Default keymap options
        -- noremap = true,
        -- buffer = true,
        -- ['n ]c'] = { expr = true, "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'"},
        -- ['n [c'] = { expr = true, "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'"},
        -- ['n <leader>hs'] = '<cmd>lua require"gitsigns".stage_hunk()<CR>',
        -- ['v <leader>hs'] = '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
        -- ['n <leader>hu'] = '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>',
        -- ['n <leader>hr'] = '<cmd>lua require"gitsigns".reset_hunk()<CR>',
        -- ['v <leader>hr'] = '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
        -- ['n <leader>hR'] = '<cmd>lua require"gitsigns".reset_buffer()<CR>',
        -- ['n <leader>hp'] = '<cmd>lua require"gitsigns".preview_hunk()<CR>',
        -- ['n <leader>hb'] = '<cmd>lua require"gitsigns".blame_line(true)<CR>',
        -- Text objects
        -- ['o ih'] = ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>',
        -- ['x ih'] = ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
    -- },
    watch_gitdir = {
        interval = 1000,
        follow_files = true
    },
    current_line_blame = false,
    sign_priority = 6,
    update_debounce = 100,
    status_formatter = nil, -- Use default
    word_diff = false,
    current_line_blame_opts = { delay = 1000, virt_text = 'eol' },
    diff_opts = {internal=true},
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns
    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end
    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})
    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})
    -- Actions
    map({'n', 'v'}, '<leader>hs', ':Gitsigns stage_hunk<CR>')
    map({'n', 'v'}, '<leader>hr', ':Gitsigns reset_hunk<CR>')
    map('n', '<leader>hS', gs.stage_buffer)
    map('n', '<leader>hu', gs.undo_stage_hunk)
    map('n', '<leader>hR', gs.reset_buffer)
    map('n', '<leader>hp', gs.preview_hunk)
    map('n', '<leader>hb', function() gs.blame_line{full=true} end)
    map('n', '<leader>tb', gs.toggle_current_line_blame)
    map('n', '<leader>hd', gs.diffthis)
    map('n', '<leader>hD', function() gs.diffthis('~') end)
    map('n', '<leader>td', gs.toggle_deleted)
    -- Text object
    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
    end
}


require 'colorizer'.setup()

local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

require'nvim-treesitter.configs'.setup {
    ensure_installed = { 'typescript', 'php', 'css', 'html', 'dockerfile', 'javascript', 'bash', 'tsx', 'yaml', 'json' },
    sync_install = false,
    highlight = {
        enable = true,              -- false will disable the whole extension
    },
    indent = {
        enable = true
    },
}

require'lspconfig'.gopls.setup {
    on_attach = function(client)
        require 'illuminate'.on_attach(client)
    end,
}

local t = function(str)
    return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = vim.fn.col(".") - 1
    if col == 0 or vim.fn.getline("."):sub(col, col):match("%s") then
        return true
    else
        return false
    end
end

_G.tab_complete = function()
    if vim.fn.call("vsnip#jumpable", {1}) == 1 then
        return t "<Plug>(vsnip-jump-next)"
    elseif vim.fn.pumvisible() == 1 then
        return t "<C-n>"
    elseif check_back_space() then
        return t "<Tab>"
    else
        return vim.fn["compe#complete"]()
    end
end

_G.s_tab_complete = function()
    if vim.fn.call("vsnip#jumpable", {-1}) == 1 then
        return t "<Plug>(vsnip-jump-prev)"
    elseif vim.fn.pumvisible() == 1 then
        return t "<C-p>"
    else
        return t "<S-Tab>"
    end
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

-- local servers = { 'pyright', 'rust_analyzer', 'tsserver', 'phpactor', 'intelephense' }
local servers = { 'html' }
local nvim_lsp = require('lspconfig')
for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup {
        capabilities = capabilities,
        on_attach = on_attach,
        flags = {
            debounce_text_changes = 150,
        }
    }
end

-- require'lspconfig'.intelephense.setup{
--     cmd = { "intelephense", "--stdio" };
--     filetypes = { "php" };
--     root_dir = require'lspconfig'.util.root_pattern("composer.json", ".git");
--     capabilities = capabilities,
--     on_attach = on_attach,
--     flags = {
--       debounce_text_changes = 150,
--     }
-- }

require'lspconfig'.tsserver.setup{
    compilerOptions = {
        module = "commonjs",
        target = "es6",
        checkJs = false
    };
    exclude = { "node_modules" };
    cmd = { "typescript-language-server", "--stdio" };
    filetypes = { "javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx" };
    init_options = {
        hostInfo = "neovim"
    };

    root_dir = require'lspconfig'.util.root_pattern("package.json", "tsconfig.json", "jsconfig.json", ".git");

    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
        debounce_text_changes = 150,
    }
}

g.nvim_tree_icons = {
    default = '';
    symlink = '';
    git = {
        unstaged = "✗";
        staged = "✓";
        unmerged = "";
        renamed = "➜";
        untracked = "★";
        deleted = "";
        ignored = "◌";
    };
    folder= {
        arrow_open = "",
        -- arrow_closed = "";
        arrow_closed = "»";
        default = "";
        open= "";
        empty = "";
        empty_open = "";
        symlink = "";
        symlink_open = "";
    }
};

-- following options are the default
-- each of these are documented in `:help nvim-tree.OPTION_NAME`
require'nvim-tree'.setup {
    disable_netrw       = true,
    hijack_netrw        = true,
    open_on_setup       = false,
    ignore_ft_on_setup  = {},
    open_on_tab         = false,
    hijack_cursor       = false,
    update_cwd          = false,
    update_to_buf_dir   = {
        enable = true,
        auto_open = true,
    },
    diagnostics = {
        enable = false,
        icons = {
            hint = "",
            info = "",
            warning = "",
            error = "",
        }
    },
    update_focused_file = {
        enable      = false,
        update_cwd  = false,
        ignore_list = {}
    },
    system_open = {
        cmd  = nil,
        args = {}
    },
    filters = {
        dotfiles = false,
        custom = {}
    },
    view = {
        width = 30,
        height = 30,
        hide_root_folder = false,
        side = 'left',
        auto_resize = false,
        mappings = {
            custom_only = false,
            list = {}
        }
    }
}

